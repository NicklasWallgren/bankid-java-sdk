plugins {
    id 'java'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "com.github.spotbugs" version "4.7.2"
    id "net.ltgt.errorprone" version "2.0.2"
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
}

group 'dev.nicklasw'
version '0.10.0-SNAPSHOT'

sourceCompatibility = 16
targetCompatibility = 16

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'

    compileOnly 'com.github.spotbugs:spotbugs-annotations'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    errorprone("com.google.errorprone:error_prone_core:2.8.0")
}

shadowJar {
    classifier = ''
    relocate 'com.fasterxml.jackson', 'shadow.com.fasterxml.jackson'
}

test {
    useJUnitPlatform()
}

spotbugs {
    toolVersion = '4.3.0'
}

spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Werror"
    options.errorprone.enabled = true
    options.errorprone {
        disableWarningsInGeneratedCode = true
        ignoreUnknownCheckNames = false
        allErrorsAsWarnings = false
        // workaround for: https://github.com/google/error-prone/issues/780
        errorproneArgs = [
                '-Xep:UnusedVariable:OFF', // https://github.com/google/error-prone/issues/1266
                '-Xep:UnusedMethod:OFF', // https://github.com/google/error-prone/issues/1266
                '-Xep:MissingOverride:OFF',
                '-Xep:JavaTimeDefaultTimeZone:OFF',
                '-Xep:SameNameButDifferent:OFF',
                '-Xep:MissingSummary:OFF', // Until https://github.com/projectlombok/lombok/issues/2730
                '-Xlint:deprecation',
        ]
    }
}

task javadocJar(type: Jar) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.delombokTask
    classifier = 'sources'
}


publishing {
    repositories {
        maven {
            name = "ossrh"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
//        maven {
//            name = "ossrhSnapshot"
//            url = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
//            credentials {
//                username = findProperty('ossrhUsername')
//                password = findProperty('ossrhPassword')
//            }
//        }
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'BankID SDK'
                artifactId = 'bankid-sdk'
                packaging = 'jar'
                description = 'A SDK to interact with the BankID API'
                url = 'https://github.com/NicklasWallgren/bankid-java-sdk'

                scm {
                    connection = 'scm:git:git://github.com/NicklasWallgren/bankid-java-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com/NicklasWallgren/bankid-java-sdk.git'
                    url = 'https://github.com/NicklasWallgren/bankid-java-sdk'
                }

                licenses {
                    license {
                        name = 'MIT Licence'
                        url = 'https://github.com/NicklasWallgren/bankid-java-sdk/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id = 'nicklas'
                        name = 'NicklasWallgren'
                        email = 'nicklas.wallgren@stim.se'
                    }
                }
            }
        }
    }
}

javadoc {
    exclude "**/lombok.config"
    dependsOn delombok
    failOnError = false
}

delombok {
    modulePath.from sourceSets.main.compileClasspath
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestReport

signing {
    sign publishing.publications.mavenJava
}
